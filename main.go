package main

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/swaggo/files"       // swagger embed files
	"github.com/swaggo/gin-swagger" // gin-swagger middleware

	"github.com/uacademy/article/config"
	"github.com/uacademy/article/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/uacademy/article/handlers"
	"github.com/uacademy/article/storage"
	"github.com/uacademy/article/storage/postgres"
)

func main() {
	cfg := config.Load()

	psqlConString := fmt.Sprintf(
		"host=%s port=%d user=%s password=%s dbname=%s sslmode=disable", 
		cfg.PostgresHost,
		cfg.PostgresPort,
		cfg.PostgresUser, 
		cfg.PostgresPassword, 
		cfg.PostgresDatabase,
	)

	// programmatically set swagger info
	docs.SwaggerInfo.Title = cfg.App
	docs.SwaggerInfo.Version = cfg.AppVersion

	var stg storage.StorageI
	stg, err := postgres.InitDb(psqlConString)
	if err != nil {
		panic(err)
	}

	if cfg.Environment != "development" {
		gin.SetMode(gin.ReleaseMode)
	}

	r := gin.New()

	r.Use(gin.Logger(), gin.Recovery()) // Later they will be replaced by custom Logger and Recovery

	//template GET method
	r.GET("/ping", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"message": "pong",
		})
	})

	h := handlers.Handler{
		Stg: stg,
	}

	v1 := r.Group("/v1")
	{
		v1.POST("/article", h.CreateArticle)
		v1.GET("/article/:id", h.GetArticleById)
		v1.GET("/article", h.GetArticleList)
		v1.PUT("/article", h.UpdateArticle)
		v1.DELETE("/article/:id", h.DeleteArticle)

		v1.POST("/author", h.CreateAuthor)
		v1.GET("/author/:id", h.GetAuthorById)
		v1.GET("/author", h.GetAuthorList)
		v1.PUT("/author", h.UpdateAuthor)
		v1.DELETE("/author/:id", h.DeleteAuthor)
	}

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	r.Run(cfg.HTTPPort) // listen and serve on 0.0.0.0:8080 (for windows "localhost:8080")
}
